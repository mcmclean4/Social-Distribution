# Generated by Django 5.1.6 on 2025-03-09 18:20

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('type', models.CharField(choices=[('author', 'author')], default='author', editable=False, max_length=50)),
                ('id', models.URLField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('host', models.URLField(blank=True, null=True)),
                ('displayName', models.CharField(max_length=255)),
                ('github', models.CharField(blank=True, max_length=100, null=True)),
                ('github_timestamp', models.DateTimeField(auto_now_add=True)),
                ('profileImage', models.ImageField(blank=True, default='images/default_profile.png', upload_to='images/')),
                ('page', models.URLField(blank=True, null=True)),
                ('isAdmin', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('type', models.CharField(default='comment', max_length=10)),
                ('id', models.URLField(primary_key=True, serialize=False)),
                ('internal_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('comment', models.TextField()),
                ('contentType', models.CharField(default='text/markdown', max_length=50)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('post', models.URLField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='social.author')),
            ],
            options={
                'ordering': ['-published'],
            },
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(blank=True, max_length=255)),
                ('follower_id', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('followee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_requests', to='social.author')),
            ],
            options={
                'unique_together': {('follower_id', 'followee')},
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('type', models.CharField(choices=[('post', 'post'), ('comment', 'Comment')], default='post', max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('id', models.URLField(editable=False, unique=True)),
                ('page', models.URLField(blank=True, null=True)),
                ('description', models.CharField(max_length=255)),
                ('contentType', models.CharField(choices=[('text/plain', 'Plain Text'), ('text/markdown', 'Markdown'), ('image/png;base64', 'PNG'), ('image/jpeg;base64', 'JPEG')], max_length=50)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('FRIENDS', 'Friends'), ('UNLISTED', 'Unlisted'), ('DELETED', 'Deleted')], max_length=50)),
                ('internal_id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social.author')),
            ],
            options={
                'ordering': ['-published'],
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social.author')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social.post')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='liked_posts', through='social.PostLike', to='social.author'),
        ),
        migrations.CreateModel(
            name='Inbox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='inbox', max_length=30)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social.author')),
                ('inbox_comments', models.ManyToManyField(blank=True, to='social.comment')),
                ('inbox_follows', models.ManyToManyField(blank=True, to='social.followrequest')),
                ('inbox_posts', models.ManyToManyField(blank=True, to='social.post')),
                ('inbox_likes', models.ManyToManyField(blank=True, to='social.postlike')),
            ],
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('pageNumber', models.IntegerField()),
                ('size', models.IntegerField()),
                ('count', models.IntegerField()),
                ('src', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social.post')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower_id', models.CharField(max_length=255)),
                ('followee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='social.author')),
            ],
            options={
                'unique_together': {('follower_id', 'followee')},
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('type', models.CharField(default='like', max_length=10)),
                ('id', models.URLField(primary_key=True, serialize=False)),
                ('object', models.URLField()),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked_items', to='social.author')),
            ],
            options={
                'ordering': ['-published'],
                'unique_together': {('author', 'object')},
            },
        ),
    ]
